{"remainingRequest":"D:\\JS\\blogs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\JS\\blogs\\src\\components\\content\\login.vue?vue&type=style&index=0&id=0633661a&scoped=true&lang=css&","dependencies":[{"path":"D:\\JS\\blogs\\src\\components\\content\\login.vue","mtime":1593676581242},{"path":"D:\\JS\\blogs\\node_modules\\css-loader\\index.js","mtime":1593388453260},{"path":"D:\\JS\\blogs\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1593388507363},{"path":"D:\\JS\\blogs\\node_modules\\postcss-loader\\src\\index.js","mtime":1593388514032},{"path":"D:\\JS\\blogs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593388478700},{"path":"D:\\JS\\blogs\\node_modules\\vue-loader\\lib\\index.js","mtime":1593388507309}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.identifybox{\n display: flex;\n justify-content: space-between;\n margin-top:7px;\n}\n.iconstyle{\n color:#409EFF;\n}\n",{"version":3,"sources":["login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"login.vue","sourceRoot":"src/components/content","sourcesContent":["<template>\n <el-form class=\"login-form\" status-icon :rules=\"loginRules\" ref=\"loginForm\" :model=\"loginForm\" label-width=\"0\">\n <el-form-item prop=\"username\">\n  <el-input size=\"small\" @keyup.enter.native=\"handleLogin\" v-model=\"loginForm.username\" auto-complete=\"off\" placeholder=\"请输入用户名\">\n  <i slot=\"prefix\" class=\"icon-yonghu\"></i>\n  </el-input>\n </el-form-item>\n <el-form-item prop=\"password\">\n  <el-input size=\"small\" @keyup.enter.native=\"handleLogin\" :type=\"passwordType\" v-model=\"loginForm.password\" auto-complete=\"off\" placeholder=\"请输入密码\">\n  <i class=\"el-icon-view el-input__icon\" :style=\"fontstyle\" slot=\"suffix\" @click=\"showPassword\"></i>\n  <i slot=\"prefix\" class=\"icon-mima\"></i>\n  </el-input>\n </el-form-item>\n <el-form-item prop=\"verifycode\">\n  <!-- 注意：prop与input绑定的值一定要一致，否则验证规则中的value会报undefined，因为value即为绑定的input输入值 -->\n  <el-input v-model=\"loginForm.verifycode\" placeholder=\"请输入验证码\" class=\"identifyinput\"></el-input>\n </el-form-item>\n <el-form-item>\n  <div class=\"identifybox\">\n  <div @click=\"refreshCode\">\n   <s-identify :identifyCode=\"identifyCode\"></s-identify>\n  </div>\n  <el-button @click=\"refreshCode\" type='text' class=\"textbtn\">看不清，换一张</el-button>\n  </div>\n </el-form-item>\n <el-checkbox v-model=\"checked\">记住账号</el-checkbox>\n <el-form-item>\n  <el-button type=\"primary\" size=\"small\" @click.native.prevent=\"handleLogin\" class=\"login-submit\">登录</el-button>\n </el-form-item>\n </el-form>\n</template>\r\n\r\n<script>\nimport { isvalidUsername } from '@/utils/validate'\nimport SIdentify from '@/components/identify/identify.vue'\nexport default {\n name: 'userlogin',\n data() {\n // 用户名自定义验证规则\n const validateUsername = (rule, value, callback) => {\n  if (!isvalidUsername(value)) {\n  callback(new Error('请输入正确的用户名'))\n  } else {\n  console.log('user', value)\n  callback()\n  }\n }\n // 验证码自定义验证规则\n const validateVerifycode = (rule, value, callback) => {\n  if (value === '') {\n  callback(new Error('请输入验证码'))\n  } else if (value !== this.identifyCode) {\n  console.log('validateVerifycode:', value)\n  callback(new Error('验证码不正确!'))\n  } else {\n  callback()\n  }\n }\n return {\n  fontstyle: {\n  },\n  loginForm: {\n  username: 'admin',\n  password: '123456',\n  verifycode: ''\n  },\n  checked: false,\n  identifyCodes: '1234567890',\n  identifyCode: '',\n  loginRules: { // 绑定在form表单中的验证规则\n  username: [\n   { required: true, trigger: 'blur', validator: validateUsername }\n  ],\n  password: [\n   { required: true, message: '请输入密码', trigger: 'blur' },\n   { min: 6, message: '密码长度最少为6位', trigger: 'blur' }\n  ],\n  verifycode: [\n   { required: true, trigger: 'blur', validator: validateVerifycode }\n  ]\n  },\n  passwordType: 'password'\n }\n },\n components: {\n SIdentify\n },\n created() {\n },\n mounted() {\n // 验证码初始化\n this.identifyCode = ''\n this.makeCode(this.identifyCodes, 4)\n },\n computed: {\n },\n props: [],\n methods: {\n // 通过改变input的type使密码可见\n showPassword() {\n  this.fontstyle === '' ? (this.fontstyle = 'color: red') : (this.fontstyle = '') // 改变密码可见按钮颜色\n  this.passwordType === ''\n  ? (this.passwordType = 'password')\n  : (this.passwordType = '')\n },\n // 点击登入按钮\n handleLogin() {\n  this.$refs.loginForm.validate(valid => {\n  if (valid) {\n   this.$store.dispatch('Login', this.loginForm).then(res => {\n   this.$router.push({ path: '/dashboard/dashboard' })\n   })\n  }\n  })\n },\n // 生成随机数\n randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min) + min)\n },\n // 切换验证码\n refreshCode() {\n  this.identifyCode = ''\n  this.makeCode(this.identifyCodes, 4)\n },\n // 生成四位随机验证码\n makeCode(o, l) {\n  for (let i = 0; i < l; i++) {\n  this.identifyCode += this.identifyCodes[\n   this.randomNum(0, this.identifyCodes.length)\n  ]\n  }\n  console.log(this.identifyCode)\n }\n }\n}\n</script>\n<style scoped>\n.identifybox{\n display: flex;\n justify-content: space-between;\n margin-top:7px;\n}\n.iconstyle{\n color:#409EFF;\n}\n</style>"]}]}